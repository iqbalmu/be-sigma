// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String

  users User[]

  @@map("roles")
}

model User {
  id       Int    @id
  password String

  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId Int

  profile    Profile?
  peminjaman Peminjaman[]
  histories  History[]

  @@map("user")
}

model Profile {
  id     Int     @id @default(autoincrement())
  name   String?
  email  String? @unique
  phone  String? @unique
  images String?

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique

  @@map("profile")
}

model History {
  id           Int     @id @default(autoincrement())
  peminjamanId Int
  inventoryId  Int
  userId       Int
  condition    String?
  startDate   DateTime @db.Date
  endDate     DateTime @db.Date
  status       String

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  inventory Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@map("history")
}

model Inventory {
  id          Int    @id
  name        String
  description String @db.Text
  category    String
  images      String
  status      String @default("available")
  stock       String @default("inStock")

  peminjamans Peminjaman[]
  histories   History[]

  @@map("inventory")
}

model Peminjaman {
  id          Int      @id @default(autoincrement())
  startDate   DateTime @db.Date
  endDate     DateTime @db.Date
  description String   @db.Text
  status      String   @default("pending")

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  inventoryId Int

  @@map("peminjaman")
}
